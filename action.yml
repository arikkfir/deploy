name: Deploy
description: Deploy a repository to a given environment in the "delivery" repository.
branding:
  icon: bookmark
  color: blue

inputs:
  repository:
    description: The repository being deployed
    required: true
  branch:
    description: The branch being deployed in the source repository
    required: true
  sha:
    description: The SHA being deployed from the branch
    required: true
  environment:
    description: The target environment to deploy to
    required: true
  token:
    description: GitHub token used to clone the "delivery" repository
    required: true

runs:
  using: composite
  steps:

    - uses: actions/checkout@v4
      with:
        path: _delivery
        repository: arikkfir/delivery
        token: ${{ inputs.token }}

    - id: deploy
      shell: bash -exuo pipefail {0}
      working-directory: _delivery
      env:
        BRANCH: ${{ inputs.branch }}
        ENVIRONMENT: ${{ inputs.environment }}
        ENVIRONMENT_DIR: environments/${{ inputs.environment }}
        ENVIRONMENT_KUSTOMIZATION_FILE: environments/${{ inputs.environment }}/kustomization.yaml
        ENVIRONMENT_TEMPLATE_FILE: etc/${{ inputs.environment }}/kustomization.yaml
        GH_TOKEN: ${{ inputs.token }}
        REPOSITORY: ${{ inputs.repository }}
        SHA: ${{ inputs.sha }}
        TOKEN: ${{ inputs.token }}
      run: |
        
        # Verify inputs
        [[ -z "${REPOSITORY}" ]] && echo "Missing repository input" && exit 1 
        [[ -z "${BRANCH}" ]] && echo "Missing branch input" && exit 1
        [[ -z "${SHA}" ]] && echo "Missing sha input" && exit 1
        [[ -z "${ENVIRONMENT}" ]] && echo "Missing environment input" && exit 1
        [[ -z "${TOKEN}" ]] && echo "Missing token input" && exit 1
        
        # Ensure repository environment kustomization exists; create it if missing
        if [[ ! -f "${ENVIRONMENT_KUSTOMIZATION_FILE}" ]]; then
          mkdir -pv "${ENVIRONMENT_DIR}"
          envsubst < "${ENVIRONMENT_TEMPLATE_FILE}" > "${ENVIRONMENT_KUSTOMIZATION_FILE}"
        fi
        
        # Create a patch file to replace the branch in the GitRepository object associated with the given repository
        # Then, add this patch to the environment's kustomization file's patches list, if it's not already there
        cat > patch-git-repository-${REPOSITORY}.yaml <<EOF
        patch: |
          - op: replace
            path: /spec/ref/branch
            value: "${BRANCH}"
        target:
          group: source.toolkit.fluxcd.io
          version: v1
          kind: GitRepository
          name: "${REPOSITORY}"
        EOF
        GIT_REPO_KUSTOMIZATION_PATCH_MISSING="$(yq e '[load("patch-git-repository-" + env(REPOSITORY) + ".yaml")] - .patches | length == 1')"
        if [[ "${GIT_REPO_KUSTOMIZATION_PATCH_MISSING}" == "true" ]]; then
          yq e -i '.patches += [load("patch-git-repository-" + env{REPOSITORY) + ".yaml")]' "${ENVIRONMENT_KUSTOMIZATION_FILE}"
          git add "${ENVIRONMENT_KUSTOMIZATION_FILE}"
        fi
        
        # Add repository to the list of repositories monitored by the Flux webhook receiver (if it's missing)
        GIT_REPO_RECEIVER_PATCH_MISSING="$(yq e '[{"kind": "GitRepository","name":env(REPOSITORY),"namespace":env(ENVIRONMENT)}] - .spec.resources | length == 1' platform/flux-webhook/receiver.yaml)"
        if [[ "${GIT_REPO_RECEIVER_PATCH_MISSING}" == "true" ]]; then
          yq e -i '.spec.resources += [{"kind": "GitRepository","name":env(REPOSITORY),"namespace":env(ENVIRONMENT)}]' platform/flux-webhook/receiver.yaml
          git add platform/flux-webhook/receiver.yaml
        fi
        
        # Push changes to delivery repository
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        if [[ -n "$(git status -s --untracked-files=no)" ]]; then
          git commit -m "deploy(${REPOSITORY}): deployment to \"${ENVIRONMENT}\"" --signoff
          git push origin HEAD
        fi
        
        # Wait for the deployment to complete
        TARGET="/repos/arikkfir/${REPOSITORY}/commits/${SHA}/statuses"
        FILTER='.[] | select(.context | test("^kustomization/"+env(REPOSITORY)+"/[a-z0-9]+")) | .state'
        while true; do
          STATE="$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "${TARGET}" | yq "${FILTER}")"
          if [[ -n "${STATE}" ]]; then
            echo "Reconciliation status for commit '${SHA}' of 'kustomization/${REPOSITORY}' is '${STATE}'"
            if [[ "${STATE}" == "success" ]]; then
              break
            fi
          fi
          sleep 10
        done
        
        # Little more pause to make sure environment is fully up
        sleep 5
