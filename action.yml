name: Deploy
description: Deploy a repository to a given environment in the "delivery" repository.
branding:
  icon: bookmark
  color: blue
inputs:
  repository:
    description: The repository being deployed
    required: true
  branch:
    description: The branch being deployed in the source repository
    required: true
  environment:
    description: The target environment to deploy to
    required: true
  token:
    description: GitHub token used to clone the "delivery" repository
    required: true
outputs:
  state:
    description: Deployment result state
    value: ${{ steps.get-state.outputs.state }}
runs:
  using: composite
  steps:
    - shell: bash
      env:
        REPOSITORY: ${{ inputs.repository }}
        BRANCH: ${{ inputs.branch }}
        ENVIRONMENT: ${{ inputs.environment }}
        TOKEN: ${{ inputs.token }}
      run: |
        [[ -z "${REPOSITORY}" ]] && echo "Missing repository input" && exit 1 
        [[ -z "${BRANCH}" ]] && echo "Missing branch input" && exit 1
        [[ -z "${ENVIRONMENT}" ]] && echo "Missing environment input" && exit 1
        [[ -z "${TOKEN}" ]] && echo "Missing token input" && exit 1
        echo "Required fields are present"
    - uses: actions/checkout@v4
      with:
        path: _delivery
        repository: arikkfir/delivery
        token: ${{ inputs.token }}
    - id: deploy
      shell: bash
      env:
        REPOSITORY: ${{ inputs.repository }}
        BRANCH: ${{ inputs.branch }}
        ENVIRONMENT: ${{ inputs.environment }}
        ENVIRONMENT_KUSTOMIZATION_FILE: environments/${{ inputs.environment }}/kustomization.yaml
        ENVIRONMENT_TEMPLATE_FILE: etc/${{ inputs.environment }}/kustomization.yaml
      working-directory: _delivery
      run: |
        if [[ ! -f "${ENVIRONMENT_KUSTOMIZATION_FILE}" ]]; then
          mkdir -pv "environments/${ENVIRONMENT}"
          envsubst < "${ENVIRONMENT_TEMPLATE_FILE}" > "${ENVIRONMENT_KUSTOMIZATION_FILE}"
        fi
        
        # Create a patch file to replace the branch in the GitRepository object associated with the given repository
        cat > patches.yaml <<EOF
        - patch: |
            - op: replace
              path: /spec/ref/branch
              value: "${BRANCH}"
          target:
            group: source.toolkit.fluxcd.io
            version: v1
            kind: GitRepository
            name: "${REPOSITORY}"
        EOF
        
        # Ensure this patch is included in the environment's kustomization file (but without duplicating it)
        yq e -i '.patches -= load("patches.yaml")' "${ENVIRONMENT_KUSTOMIZATION_FILE}"
        yq e -i '.patches += load("patches.yaml")' "${ENVIRONMENT_KUSTOMIZATION_FILE}"
        rm -fv patch.yaml
    - uses: EndBug/add-and-commit@v9
      with:
        cwd: _delivery
        add: environments/${{ inputs.environment }}
        commit: --signoff
        message: |
          deploy(${{ inputs.repository }}): deployment to "${{ inputs.environment }}"
          
          Environment:       ${{ inputs.environment }}
          Source repository: ${{ inputs.repository }}
          Branch:            ${{ inputs.branch }}
    - id: get-state
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
        REPOSITORY: ${{ inputs.repository }}
        BRANCH: ${{ inputs.branch }}
        STATUS: kustomization/greenstar/0f018c4b
      working-directory: _delivery
      run: |
        ACCEPT="Accept: application/vnd.github+json"
        API_VERSION="X-GitHub-Api-Version: 2022-11-28"
        TARGET="/repos/arikkfir/${REPOSITORY}/commits/heads/${BRANCH}/statuses"
        FILTER='.[] | select(.context | test("^kustomization/"+env(REPOSITORY)+"/[a-z0-9]+")) | .state'
        while true; do
          STATE="$(gh api -H "${ACCEPT}" -H "${API_VERSION}" "${TARGET}" | yq "${FILTER}")"
          if [[ -n "${STATE}" ]]; then
            break
          else
            sleep 5
          fi
        done
        echo "state=${STATE}" >> "$GITHUB_OUTPUT"
