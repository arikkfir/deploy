name: Deploy
description: Deploy a repository to a given environment in the "delivery" repository.
branding:
  icon: bookmark
  color: blue

inputs:
  repository:
    description: The repository being deployed
    required: true
  branch:
    description: The branch being deployed in the source repository
    required: true
  environment:
    description: The target environment to deploy to
    required: true
  token:
    description: GitHub token used to clone the "delivery" repository
    required: true

outputs:
  state:
    description: Deployment result state
    value: ${{ steps.deploy.outputs.state }}

runs:
  using: composite
  steps:

    - uses: actions/checkout@v4
      with:
        path: _delivery
        repository: arikkfir/delivery
        token: ${{ inputs.token }}

    - id: deploy
      shell: bash -exuo pipefail {0}
      env:
        BRANCH: ${{ inputs.branch }}
        ENVIRONMENT: ${{ inputs.environment }}
        ENVIRONMENT_KUSTOMIZATION_FILE: environments/${{ inputs.environment }}/kustomization.yaml
        ENVIRONMENT_TEMPLATE_FILE: etc/${{ inputs.environment }}/kustomization.yaml
        GH_TOKEN: ${{ inputs.token }}
        REPOSITORY: ${{ inputs.repository }}
        TOKEN: ${{ inputs.token }}
      working-directory: _delivery
      run: |
        
        # Verify inputs
        [[ -z "${REPOSITORY}" ]] && echo "Missing repository input" && exit 1 
        [[ -z "${BRANCH}" ]] && echo "Missing branch input" && exit 1
        [[ -z "${ENVIRONMENT}" ]] && echo "Missing environment input" && exit 1
        [[ -z "${TOKEN}" ]] && echo "Missing token input" && exit 1
        
        # Ensure repository environment kustomization exists; create it if missing
        if [[ ! -f "${ENVIRONMENT_KUSTOMIZATION_FILE}" ]]; then
          mkdir -pv "environments/${ENVIRONMENT}"
          envsubst < "${ENVIRONMENT_TEMPLATE_FILE}" > "${ENVIRONMENT_KUSTOMIZATION_FILE}"
        fi
        
        # Create a patch file to replace the branch in the GitRepository object associated with the given repository
        # Then, ensure this patch is included in the environment's kustomization file (but without duplicating it)
        cat > patches.yaml <<EOF
        - patch: |
            - op: replace
              path: /spec/ref/branch
              value: "${BRANCH}"
          target:
            group: source.toolkit.fluxcd.io
            version: v1
            kind: GitRepository
            name: "${REPOSITORY}"
        EOF
        yq e -i '.patches -= load("patches.yaml")' "${ENVIRONMENT_KUSTOMIZATION_FILE}"
        yq e -i '.patches += load("patches.yaml")' "${ENVIRONMENT_KUSTOMIZATION_FILE}"
        git add "${ENVIRONMENT_KUSTOMIZATION_FILE}"
        
        # Add repository to the list of repositories monitored by the Flux webhook receiver (if it's missing)
        REPO_MONITORED_EXPR='[{"kind": "GitRepository","name":env(REPOSITORY),"namespace":env(ENVIRONMENT)}] - .spec.resources | length'
        if [[ "$(yq e "${REPO_MONITORED_EXPR}" platform/flux-webhook/receiver.yaml)" == "1" ]]; then
          yq e -i '.spec.resources += [{"kind": "GitRepository","name":env(REPOSITORY),"namespace":env(ENVIRONMENT)}]' platform/flux-webhook/receiver.yaml
          git add platform/flux-webhook/receiver.yaml
        fi
        
        # Push changes to delivery repository
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        if [[ -n "$(git status -s --untracked-files=no)" ]]; then
          git commit -m "deploy(${REPOSITORY}): deployment to \"${ENVIRONMENT}\"" --signoff
          git push origin HEAD
        fi
        
        # Wait for the deployment to complete
        ACCEPT="Accept: application/vnd.github+json"
        API_VERSION="X-GitHub-Api-Version: 2022-11-28"
        TARGET="/repos/arikkfir/${REPOSITORY}/commits/heads/${BRANCH}/statuses"
        FILTER='.[] | select(.context | test("^kustomization/"+env(REPOSITORY)+"/[a-z0-9]+")) | .state'
        while true; do
          STATE="$(gh api -H "${ACCEPT}" -H "${API_VERSION}" "${TARGET}" | yq "${FILTER}")"
          if [[ "${STATE}" == "success" ]]; then
            echo "Deployment of 'kustomization/${REPOSITORY}' on '${BRANCH}' succeeded!"
            sleep 10 
            exit 0
          elif [[ "${STATE}" == "failure" ]]; then
            echo "Deployment of 'kustomization/${REPOSITORY}' on '${BRANCH}' failed!"
            exit 1
          elif [[ "${STATE}" == "pending" ]]; then
            echo "Deployment of 'kustomization/${REPOSITORY}' on '${BRANCH}' is still pending..."
            sleep 5
          else
            echo "Waiting for commit status 'kustomization/${REPOSITORY}' on '${BRANCH}'..."
            sleep 5
          fi
        done
